#!/usr/bin/env bash

#   Copyright 2014 Alexander Fahlke
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

usage(){
	echo "Usage: ssh-tunnler <username> <tunnelhostname> <localport> <targethostname> <targethostport> [<ssh keyfile>]"
	exit 1
}

# check if there is a config file in $HOME
setup() {
	if [[ -r "$HOME/.ssh-tunnler" ]] && [[ -f "$HOME/.ssh-tunnler" ]]; then
		source "$HOME/.ssh-tunnler"
		return 0
	fi

	return 1
}

# cleanup function (kill the ssh process)
cleanup() {
	kill $1
	return $?
}

# run if user hits control-c
control_c() {
	echo -e "\ntunnel closed"
	cleanup ${PID}
	exit $?
}

# warn and exit if tunnel could not be created
tunnel-not-opened() {
	echo "Unable to open tunnel! Exiting."
	exit 255
}

open-tunnel() {
	echo "opening tunnel to ${SSHTUNNLER_HOSTNAME} on port ${SSHTUNNLER_HOSTPORT}..."

	nohup ssh -i "${SSHTUNNLER_SSHKEY}" \
		-o ForwardAgent=yes \
		-o StrictHostKeyChecking=no \
		-o ConnectTimeout=1 \
		-L ${SSHTUNNLER_LOCALPORT}:${SSHTUNNLER_HOSTNAME}:${SSHTUNNLER_HOSTPORT} \
		${SSHTUNNLER_USERNAME}@${SSHTUNNLER_TUNNELHOST} \
		-N > /dev/null 2>&1 &
	PID=$!

	sleep 2
	SSHTUNNELPID=$(ps -C ssh -o pid | grep ${PID})
	RUNNING=$?

	[[ ${RUNNING} != 0 ]] && tunnel-not-opened

	echo "tunnel opened"
}

setup
SETUPFAILED=$?
if [[ SETUPFAILED -ne 0 ]]; then
	if [[ $# < 5 ]]; then
		usage
	else
		SSHTUNNLER_USERNAME=$1
		SSHTUNNLER_TUNNELHOST=$2
		SSHTUNNLER_LOCALPORT=$3
		SSHTUNNLER_HOSTNAME=$4
		SSHTUNNLER_HOSTPORT=$5
		if [[ -n $6 ]]; then
			SSHTUNNLER_SSHKEY=$6
		fi
	fi
fi

# open the ssh tunnel
open-tunnel

# trap keyboard interrupt (control-c)
trap control_c SIGINT

# main() loop
while true; do read x; done
